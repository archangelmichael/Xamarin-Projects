{"Name":"Keychain Valet","Id":2540,"Alias":"square.valet","Description":"# Keychain Valet Details\n\n\u003e Valet lets you securely store data in the iOS or OS X Keychain without knowing a thing about how the \n\u003e Keychain works. It’s easy. We promise.\n\n## Usage\n\nTo begin storing data securely using Valet, we need to create a `Valet` instance:\n\n    var myValet = new Valet(\"Druidia\", Accessibility.WhenUnlocked);\n\nThis instance can be used to store and retrieve data securely, but only when the device is unlocked.\n\n### Choosing the Best Accessibility Value\n\nThe `Accessibility` enum is used to determine when your secrets can be accessed. \nIt’s a good idea to use the strictest accessibility possible that will allow our app to function.  \n\nFor example, if our app does not run in the background we will want to ensure the secrets can only \nbe read when the phone is unlocked by using `Accessibility.WhenUnlocked` or \n`Accessibility.WhenUnlockedThisDeviceOnly`.\n\n### Reading and Writing\n\nData can be read from and written to the Valet using various methods. \nThere is a `GetString` and `SetString` pair for working with `string` values. And, there is \na `GetObject` and `SetObject` pair for working with `NSData` values:\n\n    var username = \"Skroob\";\n\t\n    myValet.SetString(\"12345\", username);\n    var myLuggageCombination = myValet.GetString(username);\n\nValets created with a different class type, via a different initializer, or with a different \nidentifier or accessibility attribute will not be able to read or modify values in other Valets.\n\n### Sharing Secrets Among Multiple Applications\n\nData can be stored and retrieved securely across any app written by the same developer:\n\n First, add the value, `Druidia`, to the Keychain Access Groups section in the app’s \n`Entitlements.plist`. Then we an access that group in our code: \n\n    var mySharedValet = new Valet(\"Druidia\", true, Accessibility.WhenUnlocked);\n\n### Sharing Secrets Across Devices with iCloud\n\nData can be stored and retrieved securely across any app on other devices logged into the same \niCloud account with iCloud Keychain enabled when using the `SynchronizableValet`:\n\n    var mySynchronizableValet = new SynchronizableValet(\"Druidia\", Accessibility.WhenUnlocked);\n\nIf iCloud Keychain is not enabled on this device, secrets can still be read and written, but will \nnot sync to other devices.\n\n### Protecting Secrets with Touch ID or iOS Passcode\n\nData can be stored and retrieved securely, requiring the user to confirm their presence via Touch \nID or by entering their iOS passcode: \n\n    var mySecureEnclaveValet = new SecureEnclaveValet(\"Druidia\");\n\nThis instance stores and retrieves data in the Secure Enclave (supported on iOS 8.0 or later). If \nno passcode is set on the device, this instance will be unable to access or store data. Data is \nremoved from the Secure Enclave when the user removes a passcode from the device. Storing data \nusing `SecureEnclaveValet` is the most secure way to store data on iOS.\n","Version":"2.2.1.0","Summary":"Valet lets you securely store data in the iOS or OS X Keychain without knowing a thing about how the Keychain works.","QuickStart":"# Getting Started with Keychain Valet\n\n\u003e Valet lets you securely store data in the iOS or OS X Keychain without knowing a thing about how the \n\u003e Keychain works. It’s easy. We promise.\n\n## Usage\n\nTo begin storing data securely using Valet, we need to create a `Valet` instance:\n\n    var myValet = new Valet(\"Druidia\", Accessibility.WhenUnlocked);\n\nThis instance can be used to store and retrieve data securely, but only when the device is unlocked.\n\n### Choosing the Best Accessibility Value\n\nThe `Accessibility` enum is used to determine when your secrets can be accessed. \nIt’s a good idea to use the strictest accessibility possible that will allow our app to function.  \n\nFor example, if our app does not run in the background we will want to ensure the secrets can only \nbe read when the phone is unlocked by using `Accessibility.WhenUnlocked` or \n`Accessibility.WhenUnlockedThisDeviceOnly`.\n\n### Reading and Writing\n\nData can be read from and written to the Valet using various methods. \nThere is a `GetString` and `SetString` pair for working with `string` values. And, there is \na `GetObject` and `SetObject` pair for working with `NSData` values:\n\n    var username = \"Skroob\";\n\t\n    myValet.SetString(\"12345\", username);\n    var myLuggageCombination = myValet.GetString(username);\n\nValets created with a different class type, via a different initializer, or with a different \nidentifier or accessibility attribute will not be able to read or modify values in other Valets.\n\n### Sharing Secrets Among Multiple Applications\n\nData can be stored and retrieved securely across any app written by the same developer:\n\n First, add the value, `Druidia`, to the Keychain Access Groups section in the app’s \n`Entitlements.plist`. Then we an access that group in our code: \n\n    var mySharedValet = new Valet(\"Druidia\", true, Accessibility.WhenUnlocked);\n\n### Sharing Secrets Across Devices with iCloud\n\nData can be stored and retrieved securely across any app on other devices logged into the same \niCloud account with iCloud Keychain enabled when using the `SynchronizableValet`:\n\n    var mySynchronizableValet = new SynchronizableValet(\"Druidia\", Accessibility.WhenUnlocked);\n\nIf iCloud Keychain is not enabled on this device, secrets can still be read and written, but will \nnot sync to other devices.\n\n### Protecting Secrets with Touch ID or iOS Passcode\n\nData can be stored and retrieved securely, requiring the user to confirm their presence via Touch \nID or by entering their iOS passcode: \n\n    var mySecureEnclaveValet = new SecureEnclaveValet(\"Druidia\");\n\nThis instance stores and retrieves data in the Secure Enclave (supported on iOS 8.0 or later). If \nno passcode is set on the device, this instance will be unable to access or store data. Data is \nremoved from the Secure Enclave when the user removes a passcode from the device. Storing data \nusing `SecureEnclaveValet` is the most secure way to store data on iOS.\n","Hash":"17ebf2dd2be8797520cd7d7ff224760a","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}